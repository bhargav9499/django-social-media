# Generated by Django 3.2 on 2022-05-16 13:07

import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import hlis.custom_auth.managers
import hlis.utils.utils
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ApplicationUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('photo', models.ImageField(blank=True, height_field='height_photo', null=True, upload_to=hlis.utils.utils.get_user_photo_random_filename, width_field='width_photo')),
                ('width_photo', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('height_photo', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, error_messages={'unique': 'A user with that uuid already exists.'}, help_text='Required. A 32 hexadecimal digits number as specified in RFC 4122', unique=True, verbose_name='uuid')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that uuid already exists.'}, help_text='Required, 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('country', models.CharField(blank=True, max_length=50, null=True, verbose_name='country')),
                ('email', models.EmailField(blank=True, error_messages={'unique': 'A user with that email already exists.'}, max_length=254, null=True, unique=True, verbose_name='email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='Phone')),
                ('about', models.TextField(blank=True, max_length=1200, verbose_name='about me')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], default='male', max_length=10)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='last modified')),
                ('last_user_activity', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last activity')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', hlis.custom_auth.managers.ApplicationUserManager()),
            ],
        ),
    ]
